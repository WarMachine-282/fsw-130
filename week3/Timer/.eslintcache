[{"C:\\Users\\cvanl\\OneDrive - Bryan University\\fsw-130\\fsw-130\\week3\\Timer\\src\\App.js":"1","C:\\Users\\cvanl\\OneDrive - Bryan University\\fsw-130\\fsw-130\\week3\\Timer\\src\\index.js":"2"},{"size":2066,"mtime":1607828899061,"results":"3","hashOfConfig":"4"},{"size":170,"mtime":1607409798901,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"oq73aw",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\cvanl\\OneDrive - Bryan University\\fsw-130\\fsw-130\\week3\\Timer\\src\\App.js",["11"],"import React, { Component } from \"react\";\nimport \"./styles.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Stopwatch</h1>\n        <Stopwatch status={false} runningTime={0} />\n      </div>\n    );\n  }\n}\nconst formattedSeconds = (millis) => {\n  var hours = Math.floor(millis / 360000);\n  var minutes = Math.floor(millis / 60000);\n  var seconds = ((millis % 60000) / 1000).toFixed(0);\n  var milliseconds = (Math.floor(millis % 1000)).toFixed(0);\n  return hours + \":\" + minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds + \":\" + milliseconds;\n};\nclass Stopwatch extends Component {\n  state = {\n    status: false,\n    runningTime: 0,\n    laps: [],\n  };\n  handleChange = () => {\n    this.setState((state) => {\n      if (state.status) {\n        clearInterval(this.timer);\n      } else {\n        const startTimer = Date.now() - this.state.runningTime;\n        this.timer = setInterval(() => {\n          this.setState({ runningTime: Date.now() - startTimer });\n        });\n      }\n      return { status: !state.status };\n    });\n  };\n  handleReset = () => {\n    clearInterval(this.timer);\n    this.setState({ runningTime: 0, running: false });\n  };\n  handleLabClick() {\n    this.setState({\n      laps: this.state.laps.concat([this.state.runningTime]),\n    });\n  }\n  render() {\n    const { status, runningTime, laps } = this.state;\n    return (\n      <div className=\"stopwatch\">\n        <div className=\"stopwatch-timer\">\n          <p>{formattedSeconds(runningTime)}</p>\n          <button onClick={this.handleChange}>\n            {status ? \"Stop\" : \"Start\"}\n          </button>\n          <button onClick={this.handleReset}>Reset</button>\n          <button onClick={this.handleLabClick.bind(this)}>Lap</button>\n        </div>\n        <ul className=\"stopwatch-laps\">\n          {this.state.laps.map((lap, i) => (\n            <li className=\"stopwatch-lap\">\n              <strong>{i + 1}</strong>\n              {formattedSeconds(lap)}\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\nexport default App;\n","C:\\Users\\cvanl\\OneDrive - Bryan University\\fsw-130\\fsw-130\\week3\\Timer\\src\\index.js",[],{"ruleId":"12","severity":1,"message":"13","line":50,"column":34,"nodeType":"14","messageId":"15","endLine":50,"endColumn":38},"no-unused-vars","'laps' is assigned a value but never used.","Identifier","unusedVar"]